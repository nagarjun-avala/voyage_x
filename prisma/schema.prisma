generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  VOYAGER
  ADMIN
  MANAGER
  HEADCOOK
  SUPERVISOR
}

enum OrderType {
  CATERING
  STATIONERY
}

enum BookingType {
  MOVIE
  RESORT
  SALON
  FITNESS
  PARTY
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String     @unique
  password  String
  email     String?    @unique
  avatar    String?
  isActive  Boolean    @default(false)
  role      Role       @default(VOYAGER)
  gender    Gender     @default(MALE)
  contact   String?
  lastLogin DateTime?
  auditLogs AuditLog[]
  orders    Order[]
  bookings  Booking[]
  messages  Message[]  @relation("UserMessages")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  type       OrderType
  items      Json
  status     String    @default("PENDING")
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Booking {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  type        BookingType
  details     Json // e.g., movieId, seating info, fitness time, party type, etc.
  scheduledAt DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}
