generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  VOYAGER
  ADMIN
  MANAGER
  HEADCOOK
  SUPERVISOR
}

enum OrderType {
  CATERING
  STATIONERY
}

enum BookingType {
  MOVIE
  RESORT
  SALON
  FITNESS
  PARTY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentProvider {
  RAZORPAY
  STRIPE
  PAYPAL
  CASH
  MANUAL
}

enum PaymentMethod {
  CARD
  UPI
  NETBANKING
  WALLET
  CASH
  QR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
}

enum RoomType {
  SINGLE
  DOUBLE
  FAMILY
  SUITE
}

enum MealPlan {
  NONE
  BREAKFAST_ONLY
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String     @unique
  password  String
  email     String?    @unique
  avatar    String?
  isActive  Boolean    @default(false)
  role      Role       @default(VOYAGER)
  gender    Gender     @default(MALE)
  contact   String?
  lastLogin DateTime?
  auditLogs AuditLog[]
  orders    Order[]
  bookings  Booking[]
  messages  Message[]  @relation("UserMessages")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Payment   Payment[]
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  type       OrderType
  items      Json
  status     String    @default("PENDING")
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  guestName  String
  guestEmail String
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  amount     Float
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])

  roomId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])

  adults   Int
  children Int
  mealPlan MealPlan
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

model Payment {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  amount    Float
  currency  String          @default("INR")
  status    PaymentStatus
  provider  PaymentProvider
  method    PaymentMethod?
  invoiceId String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Room {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          RoomType
  capacity      Int
  pricePerAdult Float
  pricePerChild Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookings Booking[]
}
