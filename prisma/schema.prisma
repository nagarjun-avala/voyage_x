generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  VOYAGER
  ADMIN
  MANAGER
  HEADCOOK
  SUPERVISOR
}

enum BookingType {
  MOVIE
  RESORT
  SALON
  FITNESS
  PARTY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentProvider {
  RAZORPAY
  STRIPE
  PAYPAL
  CASH
  MANUAL
}

enum PaymentMethod {
  CARD
  UPI
  NETBANKING
  WALLET
  CASH
  QR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
}

enum RoomType {
  SINGLE
  DOUBLE
  FAMILY
  SUITE
}

enum MealPlan {
  NONE
  BREAKFAST_ONLY
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
}

enum ProductCategory {
  CATERING
  STATIONERY
  GIFT
  CHOCOLATE
  BOOK
  OTHER
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String     @unique
  password  String
  email     String?    @unique
  avatar    String?
  isActive  Boolean    @default(false)
  role      Role       @default(VOYAGER)
  gender    Gender     @default(MALE)
  contact   String?
  lastLogin DateTime?
  auditLogs AuditLog[]
  bookings  Booking[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orders    Order[]    @relation("UserOrders")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  status     OrderStatus @default(PENDING)
  userId     String      @db.ObjectId
  orderedBy  User        @relation("UserOrders", fields: [userId], references: [id])
  items      OrderItem[] @relation("OrderItemsOnOrder")
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  guestName  String
  guestEmail String
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  amount     Float
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])

  roomId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])

  adults   Int
  children Int
  mealPlan MealPlan
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          RoomType
  capacity      Int
  pricePerAdult Float
  pricePerChild Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  bookings Booking[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  unit      String? // optional: PCS, PACK, etc.
  notes     String? // optional additional info
  order     Order?  @relation("OrderItemsOnOrder", fields: [orderId], references: [id])
  orderId   String? @db.ObjectId
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    ProductCategory
  price       Float
  stock       Int             @default(0)
  imageUrl    String?
  metadata    Json? // ‚Üê flexible field for dynamic item details
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  orderItem OrderItem[]
}
